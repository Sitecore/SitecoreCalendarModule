//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.225.
// 
#pragma warning disable 1591

namespace Sitecore.Modules.EventCalendar.Network {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CalendarServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CalendarService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback MoveEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveEventInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CalendarService() {
            this.Url = global::Sitecore.Modules.EventCalendar.Properties.Settings.Default.Sitecore_Calendar_CalendarService_CalendarService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event MoveEventCompletedEventHandler MoveEventCompleted;
        
        /// <remarks/>
        public event UpdateTimeCompletedEventHandler UpdateTimeCompleted;
        
        /// <remarks/>
        public event CreateEventCompletedEventHandler CreateEventCompleted;
        
        /// <remarks/>
        public event DeleteEventCompletedEventHandler DeleteEventCompleted;
        
        /// <remarks/>
        public event SaveEventInfoCompletedEventHandler SaveEventInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MoveEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveEvent(string eventID, string newDate, Credentials credentials) {
            this.Invoke("MoveEvent", new object[] {
                        eventID,
                        newDate,
                        credentials});
        }
        
        /// <remarks/>
        public void MoveEventAsync(string eventID, string newDate, Credentials credentials) {
            this.MoveEventAsync(eventID, newDate, credentials, null);
        }
        
        /// <remarks/>
        public void MoveEventAsync(string eventID, string newDate, Credentials credentials, object userState) {
            if ((this.MoveEventOperationCompleted == null)) {
                this.MoveEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveEventOperationCompleted);
            }
            this.InvokeAsync("MoveEvent", new object[] {
                        eventID,
                        newDate,
                        credentials}, this.MoveEventOperationCompleted, userState);
        }
        
        private void OnMoveEventOperationCompleted(object arg) {
            if ((this.MoveEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTime(string eventID, string startTime, string endTime, bool updateSeries, Credentials credentials) {
            this.Invoke("UpdateTime", new object[] {
                        eventID,
                        startTime,
                        endTime,
                        updateSeries,
                        credentials});
        }
        
        /// <remarks/>
        public void UpdateTimeAsync(string eventID, string startTime, string endTime, bool updateSeries, Credentials credentials) {
            this.UpdateTimeAsync(eventID, startTime, endTime, updateSeries, credentials, null);
        }
        
        /// <remarks/>
        public void UpdateTimeAsync(string eventID, string startTime, string endTime, bool updateSeries, Credentials credentials, object userState) {
            if ((this.UpdateTimeOperationCompleted == null)) {
                this.UpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("UpdateTime", new object[] {
                        eventID,
                        startTime,
                        endTime,
                        updateSeries,
                        credentials}, this.UpdateTimeOperationCompleted, userState);
        }
        
        private void OnUpdateTimeOperationCompleted(object arg) {
            if ((this.UpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateEvent(string evtXml, string scheduleXml, string optionsXml, Credentials credentials) {
            this.Invoke("CreateEvent", new object[] {
                        evtXml,
                        scheduleXml,
                        optionsXml,
                        credentials});
        }
        
        /// <remarks/>
        public void CreateEventAsync(string evtXml, string scheduleXml, string optionsXml, Credentials credentials) {
            this.CreateEventAsync(evtXml, scheduleXml, optionsXml, credentials, null);
        }
        
        /// <remarks/>
        public void CreateEventAsync(string evtXml, string scheduleXml, string optionsXml, Credentials credentials, object userState) {
            if ((this.CreateEventOperationCompleted == null)) {
                this.CreateEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEventOperationCompleted);
            }
            this.InvokeAsync("CreateEvent", new object[] {
                        evtXml,
                        scheduleXml,
                        optionsXml,
                        credentials}, this.CreateEventOperationCompleted, userState);
        }
        
        private void OnCreateEventOperationCompleted(object arg) {
            if ((this.CreateEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteEvent(string eventID, bool deleteSeries, Credentials credentials) {
            this.Invoke("DeleteEvent", new object[] {
                        eventID,
                        deleteSeries,
                        credentials});
        }
        
        /// <remarks/>
        public void DeleteEventAsync(string eventID, bool deleteSeries, Credentials credentials) {
            this.DeleteEventAsync(eventID, deleteSeries, credentials, null);
        }
        
        /// <remarks/>
        public void DeleteEventAsync(string eventID, bool deleteSeries, Credentials credentials, object userState) {
            if ((this.DeleteEventOperationCompleted == null)) {
                this.DeleteEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEventOperationCompleted);
            }
            this.InvokeAsync("DeleteEvent", new object[] {
                        eventID,
                        deleteSeries,
                        credentials}, this.DeleteEventOperationCompleted, userState);
        }
        
        private void OnDeleteEventOperationCompleted(object arg) {
            if ((this.DeleteEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveEventInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveEventInfo(string evtXml, string scheduleXml, string optionsXml, bool updateSeries, Credentials credentials) {
            this.Invoke("SaveEventInfo", new object[] {
                        evtXml,
                        scheduleXml,
                        optionsXml,
                        updateSeries,
                        credentials});
        }
        
        /// <remarks/>
        public void SaveEventInfoAsync(string evtXml, string scheduleXml, string optionsXml, bool updateSeries, Credentials credentials) {
            this.SaveEventInfoAsync(evtXml, scheduleXml, optionsXml, updateSeries, credentials, null);
        }
        
        /// <remarks/>
        public void SaveEventInfoAsync(string evtXml, string scheduleXml, string optionsXml, bool updateSeries, Credentials credentials, object userState) {
            if ((this.SaveEventInfoOperationCompleted == null)) {
                this.SaveEventInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveEventInfoOperationCompleted);
            }
            this.InvokeAsync("SaveEventInfo", new object[] {
                        evtXml,
                        scheduleXml,
                        optionsXml,
                        updateSeries,
                        credentials}, this.SaveEventInfoOperationCompleted, userState);
        }
        
        private void OnSaveEventInfoOperationCompleted(object arg) {
            if ((this.SaveEventInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveEventInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Credentials {
        
        private string customDataField;
        
        private string passwordField;
        
        private string userNameField;
        
        /// <remarks/>
        public string CustomData {
            get {
                return this.customDataField;
            }
            set {
                this.customDataField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MoveEventCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateEventCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteEventCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveEventInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591